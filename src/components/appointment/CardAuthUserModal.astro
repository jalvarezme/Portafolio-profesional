---
import "../../styles/appointment/components/cardAuthUserModal.css";
---


<div id="user-info-section" class="user-info-container" style="display: none">
  <div class="user-info-status"></div>
</div>

<script>
  import { UserStorage, AuthStorage } from "../../helpers";
  import { stateModalAuth } from "./stateModalAuth";
  import { AUTH_ENDPOINTS } from "../../const";

  interface UserInfo {
    profilePicture?: string;
    name?: string;
    email?: string;
  }

  const state: {
    status: "idle" | "loading" | "success" | "error";
    userInfo: UserInfo | null;
    error: string | null;
  } = {
    status: "idle", // 'idle' | 'loading' | 'success' | 'error'
    userInfo: null,
    error: null,
  };

  // DOM Elements
  const userInfoSection = document.querySelector(
    "#user-info-section",
  ) as HTMLElement;
  const userInfoStatus = userInfoSection?.querySelector(
    ".user-info-status",
  ) as HTMLElement;

  // Set up listeners
  function setUpListeners() {
    stateModalAuth.modal?.addEventListener(
      "fetched-user-auth-modal",
      (e: Event) => {
        const customEvent = e as CustomEvent;
        fetchUserInfo(customEvent?.detail);
      },
    );
  }

  document.addEventListener("DOMContentLoaded", () => {
    setUpListeners();
    fetchUserLocalStorage();
  });

  function fetchUserLocalStorage() {
    if (!UserStorage.getData()) {
      return;
    }
    const user = JSON.parse(UserStorage.getData() || "{}");
    state.userInfo = user;
    state.status = "success";
    render();
  }

  // Main render function
  function render() {
    userInfoSection.style.display = "block";
    switch (state.status) {
      case "loading":
        userInfoStatus.innerHTML = `
          <div class="status-container status-loading">
            <div class="status-message">
              <span class="loading-spinner"></span>
              <span>Loading your information...</span>
            </div>
          </div>
        `;
        break;

      case "error":
        userInfoStatus.innerHTML = `
          <div class="status-container status-error">
            <div class="status-message">
              <span>⚠️ ${state.error || "Failed to fetch user information"}</span>
            </div>
          </div>
        `;
        break;

      case "success":
        userInfoStatus.innerHTML = `
          <div class="user-info-card">
            <img id="user-avatar" src="${state.userInfo?.profilePicture || ""}" 
                 alt="User avatar" class="user-avatar" />
            <div class="user-details">
              <h4 class="user-name">${state.userInfo?.name || "Google User"}</h4>
              <p class="user-email">${state.userInfo?.email || ""}</p>
            </div>
          </div>
          <button type="button" id="continue-button" class="btn btn--primary">
            Continue
          </button>
        `;
        const continueButton =
          userInfoSection.querySelector("#continue-button");
        continueButton?.addEventListener("click", () => {
          stateModalAuth.modal?.dispatchEvent(
            new CustomEvent("close-auth-modal"),
          );
        });
        break;

      default:
        userInfoSection.style.display = "none";
    }
  }

  async function fetchUserInfo(token: string) {
  try {
    state.status = "loading";
    state.userInfo = null;
    state.error = null;
    render();
    
    const endpoint = AUTH_ENDPOINTS[stateModalAuth.mode as keyof typeof AUTH_ENDPOINTS];

    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}` // Add token to header
      },
      body: JSON.stringify({ token }) // Send token in body if needed
    }).then((res) => {
      if (!res.ok) {
        throw new Error("Failed to fetch user info");
      }
      return res.json();
    });

    console.log("Response:", response);

    const { data } = await response;

    // Store the JWT token received from the backend
    if (data.token) {
      localStorage.setItem('jwtToken', data.token);
    }

    state.status = "success";
    state.userInfo = data?.user;
    UserStorage.setData(JSON.stringify(state.userInfo));
    authDone();
  } catch (error: any) {
    state.status = "error";
    state.error = error.message || "Failed to fetch user information";
    console.error("Error fetching user info:", error);
  } finally {
    render();
  }
}
function authDone() {
  // Remove cookie setting
  const event = new CustomEvent("auth-done", {
    detail: { user: state.userInfo },
  });
  document.body.dispatchEvent(event);
}
</script>
